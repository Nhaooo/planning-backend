#!/usr/bin/env python3
"""
Script de seed pour initialiser la base de donn√©es avec des donn√©es de d√©monstration
"""

import sys
import os
from datetime import date, timedelta
from sqlalchemy.orm import Session

# Ajouter le r√©pertoire de l'app au path
sys.path.append(os.path.dirname(__file__))

from app.database import SessionLocal, engine
from app.models import *
from app.models.week_kind import WeekKindEnum
from app.models.vacation_period import VacationPeriodEnum


def create_seed_data():
    """Cr√©e les donn√©es de d√©monstration"""
    db = SessionLocal()
    
    try:
        # 1. Cr√©er les employ√©s
        employees_data = [
            {"slug": "jeanne", "fullname": "Jeanne Dupont", "active": True},
            {"slug": "julien", "fullname": "Julien Martin", "active": True},
            {"slug": "lucas", "fullname": "Lucas Bernard", "active": True},
            {"slug": "melanie", "fullname": "M√©lanie Rousseau", "active": True},
            {"slug": "raphael", "fullname": "Rapha√´l Moreau", "active": True},
        ]
        
        employees = []
        for emp_data in employees_data:
            employee = Employee(**emp_data)
            db.add(employee)
            employees.append(employee)
        
        db.commit()
        print(f"‚úì Cr√©√© {len(employees)} employ√©s")
        
        # 2. Cr√©er les types de semaines
        week_kinds_data = [
            {"kind": WeekKindEnum.TYPE.value},
            {"kind": WeekKindEnum.CURRENT.value},
            {"kind": WeekKindEnum.NEXT.value},
            {"kind": WeekKindEnum.VACATION.value},
        ]
        
        week_kinds = []
        for wk_data in week_kinds_data:
            week_kind = WeekKind(**wk_data)
            db.add(week_kind)
            week_kinds.append(week_kind)
        
        db.commit()
        print(f"‚úì Cr√©√© {len(week_kinds)} types de semaines")
        
        # 3. Cr√©er les p√©riodes de vacances
        vacation_periods_data = [
            {"period": VacationPeriodEnum.TOUSSAINT.value},
            {"period": VacationPeriodEnum.NOEL.value},
            {"period": VacationPeriodEnum.PAQUES.value},
            {"period": VacationPeriodEnum.ETE.value},
        ]
        
        vacation_periods = []
        for vp_data in vacation_periods_data:
            vacation_period = VacationPeriod(**vp_data)
            db.add(vacation_period)
            vacation_periods.append(vacation_period)
        
        db.commit()
        print(f"‚úì Cr√©√© {len(vacation_periods)} p√©riodes de vacances")
        
        # 4. Cr√©er une semaine type pour Jeanne avec des cr√©neaux de d√©monstration
        jeanne = employees[0]  # Jeanne
        week_type = week_kinds[0]  # TYPE
        
        # Lundi de la semaine courante
        today = date.today()
        monday = today - timedelta(days=today.weekday())
        
        week = Week(
            employee_id=jeanne.id,
            kind_id=week_type.id,
            week_start_date=monday,
            meta={"opening_hours": {"start": "09:00", "end": "22:00"}}
        )
        db.add(week)
        db.commit()
        
        # 5. Cr√©er des cr√©neaux de d√©monstration pour la semaine type
        demo_slots = [
            # Lundi
            {"day_index": 0, "start_min": 540, "duration_min": 120, "title": "Ouverture matin", "category": "o", "comment": "Ouverture de la salle"},
            {"day_index": 0, "start_min": 660, "duration_min": 90, "title": "√âcole d'escalade enfants", "category": "e", "comment": "Groupe d√©butants 6-10 ans"},
            {"day_index": 0, "start_min": 750, "duration_min": 60, "title": "Administration", "category": "a", "comment": "Gestion planning"},
            {"day_index": 0, "start_min": 810, "duration_min": 180, "title": "Cours adultes", "category": "p", "comment": "Cours technique avanc√©"},
            
            # Mardi
            {"day_index": 1, "start_min": 540, "duration_min": 120, "title": "Ouverture matin", "category": "o"},
            {"day_index": 1, "start_min": 660, "duration_min": 120, "title": "Comp√©tition jeunes", "category": "c", "comment": "Entra√Ænement √©quipe comp√©tition"},
            {"day_index": 1, "start_min": 780, "duration_min": 90, "title": "Loisir libre", "category": "l"},
            
            # Mercredi
            {"day_index": 2, "start_min": 480, "duration_min": 60, "title": "Mise en place", "category": "m", "comment": "Pr√©paration mat√©riel"},
            {"day_index": 2, "start_min": 540, "duration_min": 240, "title": "√âcole d'escalade", "category": "e", "comment": "Journ√©e compl√®te enfants"},
            {"day_index": 2, "start_min": 780, "duration_min": 120, "title": "Cours adultes d√©butants", "category": "p"},
            
            # Jeudi
            {"day_index": 3, "start_min": 540, "duration_min": 120, "title": "Ouverture", "category": "o"},
            {"day_index": 3, "start_min": 660, "duration_min": 60, "title": "Sant√© adulte", "category": "s", "comment": "Escalade th√©rapeutique"},
            {"day_index": 3, "start_min": 720, "duration_min": 120, "title": "Prestation entreprise", "category": "p", "comment": "Team building"},
            
            # Vendredi
            {"day_index": 4, "start_min": 540, "duration_min": 120, "title": "Ouverture", "category": "o"},
            {"day_index": 4, "start_min": 660, "duration_min": 180, "title": "√âcole d'escalade", "category": "e"},
            {"day_index": 4, "start_min": 840, "duration_min": 120, "title": "Loisir soir√©e", "category": "l"},
            
            # Samedi
            {"day_index": 5, "start_min": 480, "duration_min": 60, "title": "Mise en place", "category": "m"},
            {"day_index": 5, "start_min": 540, "duration_min": 300, "title": "Comp√©tition", "category": "c", "comment": "Comp√©tition r√©gionale"},
            {"day_index": 5, "start_min": 840, "duration_min": 60, "title": "Rangement", "category": "m"},
            
            # Dimanche
            {"day_index": 6, "start_min": 600, "duration_min": 180, "title": "Loisir famille", "category": "l", "comment": "Escalade en famille"},
            {"day_index": 6, "start_min": 780, "duration_min": 60, "title": "Rangement", "category": "m"},
        ]
        
        slots = []
        for slot_data in demo_slots:
            slot = Slot(week_id=week.id, **slot_data)
            db.add(slot)
            slots.append(slot)
        
        db.commit()
        print(f"‚úì Cr√©√© {len(slots)} cr√©neaux de d√©monstration")
        
        # 6. Cr√©er une note pour la semaine
        note = Note(
            week_id=week.id,
            hours_total=35.5,
            comments="Semaine type avec bonne r√©partition des activit√©s. Attention √† la comp√©tition samedi.",
            last_edit_by="admin"
        )
        db.add(note)
        db.commit()
        print("‚úì Cr√©√© note de d√©monstration")
        
        print("\nüéâ Donn√©es de seed cr√©√©es avec succ√®s !")
        print(f"   - {len(employees)} employ√©s")
        print(f"   - {len(week_kinds)} types de semaines")
        print(f"   - {len(vacation_periods)} p√©riodes de vacances")
        print(f"   - 1 semaine type avec {len(slots)} cr√©neaux")
        print(f"   - 1 note de d√©monstration")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es de seed: {e}")
        db.rollback()
        raise
    finally:
        db.close()


if __name__ == "__main__":
    print("üå± Cr√©ation des donn√©es de seed...")
    create_seed_data()